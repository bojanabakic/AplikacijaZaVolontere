/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.zaduzenje;

import domen.Zadatak;
import domen.Zaduzenje;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import klijentKontroler.KlijentKontroler;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author CJ931WT
 */
public class IzvjestajDijalog extends javax.swing.JDialog {

    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    int brojReda;

    /**
     * Creates new form IzvjestajDijalog
     */
    public IzvjestajDijalog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        centriraj();
        popuniKomboMjesec();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbMjesec = new javax.swing.JComboBox<>();
        btnMjesec = new javax.swing.JButton();
        btnSumarni = new javax.swing.JButton();
        btnOtkaži = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generisanje izvještaja");

        jLabel1.setText("Generisati izvještaj za mjesec:");

        cmbMjesec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMjesec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMjesecActionPerformed(evt);
            }
        });

        btnMjesec.setText("Generiši izvještaj za mjesec");
        btnMjesec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMjesecActionPerformed(evt);
            }
        });

        btnSumarni.setBackground(new java.awt.Color(255, 0, 0));
        btnSumarni.setForeground(new java.awt.Color(255, 0, 0));
        btnSumarni.setText("Generiši sumarni izvještaj");
        btnSumarni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSumarniActionPerformed(evt);
            }
        });

        btnOtkaži.setIcon(new javax.swing.ImageIcon(getClass().getResource("/slike/cancel.png"))); // NOI18N
        btnOtkaži.setText("Otkaži");
        btnOtkaži.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkažiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnOtkaži))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSumarni)
                        .addGap(18, 18, 18)
                        .addComponent(btnMjesec, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                    .addComponent(cmbMjesec, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbMjesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMjesec)
                    .addComponent(btnSumarni)
                    .addComponent(btnOtkaži))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMjesecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMjesecActionPerformed
        String datum = (String) cmbMjesec.getSelectedItem();
        int dat = dajBrMjeseca(datum);
        Zaduzenje zad = new Zaduzenje(0, true, new Date(), null, null, null, dat);
        ArrayList<Zaduzenje> listaZaduzenja = KlijentKontroler.getInstance().vratiZaduzenjaZaMjesec(zad);

        if (listaZaduzenja == null || listaZaduzenja.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nije unijeto nijedno zaduženje za mjesec " + datum + ".");
            return;
        }

        Collections.sort(listaZaduzenja);

        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet spreadsheet = workbook.createSheet("Izvjestaj za " + datum);
        XSSFRow row;

        XSSFFont headerFont = workbook.createFont();
        headerFont.setBold(true);

        CellStyle centarStyle = workbook.createCellStyle();
        centarStyle.setAlignment(HorizontalAlignment.CENTER);
        centarStyle.setVerticalAlignment(VerticalAlignment.CENTER);

        CellStyle borderStyle = workbook.createCellStyle();
        borderStyle.setFillForegroundColor(IndexedColors.CORAL.getIndex());
        borderStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        borderStyle.setAlignment(HorizontalAlignment.CENTER);
        borderStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        borderStyle.setBorderBottom(BorderStyle.THICK);
        borderStyle.setFont(headerFont);
        
        CellStyle cs = workbook.createCellStyle();
        cs.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        cs.setAlignment(HorizontalAlignment.CENTER);
        cs.setVerticalAlignment(VerticalAlignment.CENTER);
        cs.setBorderBottom(BorderStyle.THICK);
        cs.setFont(headerFont);
        
        int size = listaZaduzenja.size();
        brojReda = 0;

        String[] header = {"ID", "Datum", "Volonter", "Unio/la", "Status"};
        row = spreadsheet.createRow(brojReda++);

        for (int j = 0; j <= 4; j++) {
            String h = header[j];

            Cell zaglavlje = row.createCell(j);
            zaglavlje.setCellValue(h);
            zaglavlje.setCellStyle(borderStyle);
        }

        for (int i = 0; i < size; i++) {
            row = spreadsheet.createRow(brojReda++);
            Zaduzenje z = listaZaduzenja.get(i);

            int cellNo = 0;
            Cell cell1 = row.createCell(cellNo++);
            cell1.setCellValue(i + 1);
            cell1.setCellStyle(centarStyle);

            Cell cell2 = row.createCell(cellNo++);
            cell2.setCellValue(sdf.format(z.getDatum()));
            cell2.setCellStyle(centarStyle);

            Cell cell3 = row.createCell(cellNo++);
            cell3.setCellValue(z.getVolonter().getIme() + " " + z.getVolonter().getPrezime());
            cell3.setCellStyle(centarStyle);

            Cell cell4 = row.createCell(cellNo++);
            cell4.setCellValue(z.getKorisnik().getKorisnickoIme());
            cell4.setCellStyle(centarStyle);

            Cell cell5 = row.createCell(cellNo++);
            cell5.setCellStyle(centarStyle);
            if (z.isStatusZaduzenja()) {
                cell5.setCellValue("odrađeno");
            } else {
                cell5.setCellValue("nije odrađeno");
            }

            if (z.getListaZadataka() != null && !z.getListaZadataka().isEmpty()) {
                String[] headerZadatka = {"Rbr", "Opis zadatka", "Vrijeme(h)", "Procjena"};
                row = spreadsheet.createRow(brojReda++);

                for (int j = 0; j <= 3; j++) {
                    String h = headerZadatka[j];

                    Cell zaglavlje = row.createCell(j+1);
                    zaglavlje.setCellValue(h);
                    zaglavlje.setCellStyle(cs);
                }
                int redniBr = 1;
                for (Zadatak zadatak : z.getListaZadataka()) {
                    row = spreadsheet.createRow(brojReda++);
                    
                    int cellNum = 1;

                    Cell c1 = row.createCell(cellNum++);
                    c1.setCellValue(redniBr++);
                    c1.setCellStyle(centarStyle);

                    Cell c2 = row.createCell(cellNum++);
                    c2.setCellValue(zadatak.getOpisZadatka());
                    c2.setCellStyle(centarStyle);

                    Cell c3 = row.createCell(cellNum++);
                    c3.setCellValue(zadatak.getPotrebnoVrijeme());
                    c3.setCellStyle(centarStyle);

                    Cell c4 = row.createCell(cellNum++);
                    c4.setCellValue(zadatak.getProcjena());
                    c4.setCellStyle(centarStyle);
                }
            }
        }

        XSSFCellStyle formulaStyle = workbook.createCellStyle();
        formulaStyle.setAlignment(HorizontalAlignment.CENTER);
        formulaStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        formulaStyle.setFont(headerFont);

        row = spreadsheet.createRow(brojReda++);
        row = spreadsheet.createRow(brojReda++);
        Cell naziv = row.createCell(1);
        naziv.setCellValue("Ukupan broj zaduženja za mjesec " + datum + ":");
        naziv.setCellStyle(formulaStyle);

        Cell formula = row.createCell(2);
        formula.setCellFormula("COUNTIF(E:E, \"odrađeno\")+COUNTIF(E:E, \"nije odrađeno\")");

        row = spreadsheet.createRow(brojReda++);
        Cell neodradjeni = row.createCell(1);
        neodradjeni.setCellValue("Ukupan broj neodrađenih zaduženja za mjesec " + datum + ":");
        neodradjeni.setCellStyle(formulaStyle);

        Cell formulaNeogradjeni = row.createCell(2);
        String formulaNeodredjeni = "COUNTIF(E:E, \"nije odrađeno\")";
        formulaNeogradjeni.setCellFormula(formulaNeodredjeni);

        for (int i = 0; i <= 6; i++) {
            spreadsheet.autoSizeColumn(i);
        }

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(new File("C:\\Users\\cj931wt\\Desktop\\Izvjestaji/Izvjestaj" + datum + ".xlsx"));
            workbook.write(out);
            Desktop dt = Desktop.getDesktop();
            dt.open(new File("C:\\Users\\cj931wt\\Desktop\\Izvjestaji/Izvjestaj" + datum + ".xlsx"));
            out.close();
            JOptionPane.showMessageDialog(this, "Uspješno generisan izvještaj.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PregledZaduzenjaForma.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Potrebno je zatvoriti .xls fajl prije generisanja izvještaja.");
            return;
        } catch (IOException ex) {
            Logger.getLogger(PregledZaduzenjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnMjesecActionPerformed

    private void btnSumarniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSumarniActionPerformed
        ArrayList<Zaduzenje> listaZaduzenja = KlijentKontroler.getInstance().vratiSvaZaduzenja();

        if (listaZaduzenja == null || listaZaduzenja.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nije unijeto nijedno zaduženje za mesec.");
            return;
        }

        Collections.sort(listaZaduzenja);

        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet spreadsheet = workbook.createSheet("Izvjestaj");
        XSSFRow row;

        XSSFFont headerFont = workbook.createFont();
        headerFont.setBold(true);

        CellStyle centarStyle = workbook.createCellStyle();
        centarStyle.setAlignment(HorizontalAlignment.CENTER);
        centarStyle.setVerticalAlignment(VerticalAlignment.CENTER);

        CellStyle borderStyle = workbook.createCellStyle();
        borderStyle.setFillForegroundColor(IndexedColors.CORAL.getIndex());
        borderStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        borderStyle.setAlignment(HorizontalAlignment.CENTER);
        borderStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        borderStyle.setBorderBottom(BorderStyle.THICK);
        borderStyle.setFont(headerFont);
        
        CellStyle cs = workbook.createCellStyle();
        cs.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        cs.setAlignment(HorizontalAlignment.CENTER);
        cs.setVerticalAlignment(VerticalAlignment.CENTER);
        cs.setBorderBottom(BorderStyle.THICK);
        cs.setFont(headerFont);
        
        int size = listaZaduzenja.size();
        brojReda = 0;

        String[] header = {"ID", "Datum", "Volonter", "Unio/la", "Status"};
        row = spreadsheet.createRow(brojReda++);

        for (int j = 0; j <= 4; j++) {
            String h = header[j];

            Cell zaglavlje = row.createCell(j);
            zaglavlje.setCellValue(h);
            zaglavlje.setCellStyle(borderStyle);
        }

        for (int i = 0; i < size; i++) {
            row = spreadsheet.createRow(brojReda++);
            Zaduzenje z = listaZaduzenja.get(i);

            int cellNo = 0;
            Cell cell1 = row.createCell(cellNo++);
            cell1.setCellValue(i + 1);
            cell1.setCellStyle(centarStyle);

            Cell cell2 = row.createCell(cellNo++);
            cell2.setCellValue(sdf.format(z.getDatum()));
            cell2.setCellStyle(centarStyle);

            Cell cell3 = row.createCell(cellNo++);
            cell3.setCellValue(z.getVolonter().getIme() + " " + z.getVolonter().getPrezime());
            cell3.setCellStyle(centarStyle);

            Cell cell4 = row.createCell(cellNo++);
            cell4.setCellValue(z.getKorisnik().getKorisnickoIme());
            cell4.setCellStyle(centarStyle);

            Cell cell5 = row.createCell(cellNo++);
            cell5.setCellStyle(centarStyle);
            if (z.isStatusZaduzenja()) {
                cell5.setCellValue("odrađeno");
            } else {
                cell5.setCellValue("nije odrađeno");
            }

            if (z.getListaZadataka() != null && !z.getListaZadataka().isEmpty()) {
                String[] headerZadatka = {"Rbr", "Opis zadatka", "Vrijeme(h)", "Procjena"};
                row = spreadsheet.createRow(brojReda++);

                for (int j = 0; j <= 3; j++) {
                    String h = headerZadatka[j];

                    Cell zaglavlje = row.createCell(j+1);
                    zaglavlje.setCellValue(h);
                    zaglavlje.setCellStyle(cs);
                }
                
                int redniBr = 1;
                for (Zadatak zadatak : z.getListaZadataka()) {
                    row = spreadsheet.createRow(brojReda++);
                    
                    int cellNum = 1;

                    Cell c1 = row.createCell(cellNum++);
                    c1.setCellValue(redniBr++);
                    c1.setCellStyle(centarStyle);

                    Cell c2 = row.createCell(cellNum++);
                    c2.setCellValue(zadatak.getOpisZadatka());
                    c2.setCellStyle(centarStyle);

                    Cell c3 = row.createCell(cellNum++);
                    c3.setCellValue(zadatak.getPotrebnoVrijeme());
                    c3.setCellStyle(centarStyle);

                    Cell c4 = row.createCell(cellNum++);
                    c4.setCellValue(zadatak.getProcjena());
                    c4.setCellStyle(centarStyle);
                }
            }
        }

        XSSFCellStyle formulaStyle = workbook.createCellStyle();
        formulaStyle.setAlignment(HorizontalAlignment.CENTER);
        formulaStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        formulaStyle.setFont(headerFont);

        row = spreadsheet.createRow(brojReda++);
        row = spreadsheet.createRow(brojReda++);
        Cell naziv = row.createCell(1);
        naziv.setCellValue("Ukupan broj zaduženja:");
        naziv.setCellStyle(formulaStyle);

        Cell formula = row.createCell(2);
        formula.setCellFormula("COUNTIF(E:E, \"odrađeno\")+COUNTIF(E:E, \"nije odrađeno\")");

        row = spreadsheet.createRow(brojReda++);
        Cell neodradjeni = row.createCell(1);
        neodradjeni.setCellValue("Ukupan broj neodrađenih zaduženja:");
        neodradjeni.setCellStyle(formulaStyle);

        Cell formulaNeogradjeni = row.createCell(2);
        String formulaNeodredjeni = "COUNTIF(E:E, \"nije odrađeno\")";
        formulaNeogradjeni.setCellFormula(formulaNeodredjeni);

        for (int i = 0; i <= 6; i++) {
            spreadsheet.autoSizeColumn(i);
        }

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(new File("C:\\Users\\cj931wt\\Desktop\\Izvjestaji/Izvjestaj.xlsx"));
            workbook.write(out);
            Desktop dt = Desktop.getDesktop();
            dt.open(new File("C:\\Users\\cj931wt\\Desktop\\Izvjestaji/Izvjestaj.xlsx"));
            out.close();
            JOptionPane.showMessageDialog(this, "Uspješno generisan izvještaj.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PregledZaduzenjaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PregledZaduzenjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSumarniActionPerformed

    private void btnOtkažiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkažiActionPerformed
        dispose();
    }//GEN-LAST:event_btnOtkažiActionPerformed

    private void cmbMjesecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMjesecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMjesecActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IzvjestajDijalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IzvjestajDijalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IzvjestajDijalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IzvjestajDijalog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IzvjestajDijalog dialog = new IzvjestajDijalog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMjesec;
    private javax.swing.JButton btnOtkaži;
    private javax.swing.JButton btnSumarni;
    private javax.swing.JComboBox<String> cmbMjesec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void centriraj() {
        this.setLocationRelativeTo(null);
    }

    private void popuniKomboMjesec() {
        String[] mjeseci = {"Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"};
        cmbMjesec.removeAllItems();
        for (String s : mjeseci) {
            cmbMjesec.addItem(s);
        }
    }

    private int dajBrMjeseca(String datum) {
        switch (datum) {
            case "Januar":
                return 1;
            case "Februar":
                return 2;
            case "Mart":
                return 3;
            case "April":
                return 4;
            case "Maj":
                return 5;
            case "Jun":
                return 6;
            case "Jul":
                return 7;
            case "Avgust":
                return 8;
            case "Septembar":
                return 9;
            case "Oktobar":
                return 10;
            case "Novembar":
                return 11;
            case "Decembar":
                return 12;
            default:
                return 0;
        }
    }

}
